/**
 * *  Copyright (C) 2012 Citrix Systems, Inc.  All rights reserved
*
 *
 * This software is licensed under the GNU General Public License v3 or later.
 *
 * It is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * 
 * This software is licensed under the GNU General Public License v3 or later.
 * 
 * It is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package com.cloud.utils;

import javax.persistence.Table;

import org.apache.log4j.Logger;

import com.cloud.utils.exception.CSExceptionErrorCode;


public class AnnotationHelper extends Object {
	// This class contains routines to help query annotation elements of objects.
	// So add any annotation routines to this class.
	
	public static final Logger s_logger = Logger.getLogger(AnnotationHelper.class.getName());
	
	public static String getTableName(Object proxyObj) {
		// Traverse to the base class of the VO class (which is the base class of the cglib proxy object's class).
		// The cglib class is generated by cglib during runtime.
		
		Class<?> curClass = proxyObj.getClass();
		if (curClass == null) {
			s_logger.info("\nCould not retrieve class information for proxy object\n");
			return null;
		}
		
		while (curClass.getSuperclass() != null && curClass.getSuperclass().getName() != "java.lang.Object") {
			curClass = curClass.getSuperclass();
		}
		// At this point, curClass is the root base class of proxyObj's class, and curClass is not java.lang.Object.

		Table tabObj = (Table)curClass.getAnnotation(Table.class);

		if (tabObj == null) {
			s_logger.info("\n" + curClass + "does not have a Table annotation\n");
			return null;
		}
		
		return tabObj.name();
	}
	
}
		
	 
	 
	
