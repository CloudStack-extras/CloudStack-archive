// Copyright 2012 Citrix Systems, Inc. Licensed under the
// Apache License, Version 2.0 (the "License"); you may not use this
// file except in compliance with the License.  Citrix Systems, Inc.
// reserves all rights not expressly granted by the License.
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Automatically generated by addcopyright.py at 04/03/2012
package com.cloud.network.element;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.Local;

import org.apache.log4j.Logger;

import com.cloud.deploy.DeployDestination;
import com.cloud.exception.ConcurrentOperationException;
import com.cloud.exception.InsufficientCapacityException;
import com.cloud.exception.ResourceUnavailableException;
import com.cloud.network.Network;
import com.cloud.network.Network.Capability;
import com.cloud.network.Network.Provider;
import com.cloud.network.Network.Service;
import com.cloud.network.rules.FirewallRule;
import com.cloud.network.vpc.PrivateGateway;
import com.cloud.network.vpc.StaticRouteProfile;
import com.cloud.network.vpc.Vpc;
import com.cloud.vm.ReservationContext;

@Local(value = NetworkElement.class)
public class VpcJuniperSRXExternalFirewallElement extends JuniperSRXExternalFirewallElement implements VpcProvider, NetworkACLServiceProvider{
    private static final Logger s_logger = Logger.getLogger(VpcJuniperSRXExternalFirewallElement.class);
    private static final Map<Service, Map<Capability, String>> capabilities = setCapabilities();

	@Override
	public boolean applyNetworkACLs(Network config,
			List<? extends FirewallRule> rules)
			throws ResourceUnavailableException {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean implementVpc(Vpc vpc, DeployDestination dest,
			ReservationContext context) throws ConcurrentOperationException,
			ResourceUnavailableException, InsufficientCapacityException {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean shutdownVpc(Vpc vpc) throws ConcurrentOperationException,
			ResourceUnavailableException {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean createPrivateGateway(PrivateGateway gateway)
			throws ConcurrentOperationException, ResourceUnavailableException {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean deletePrivateGateway(PrivateGateway privateGateway)
			throws ConcurrentOperationException, ResourceUnavailableException {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean applyStaticRoutes(Vpc vpc, List<StaticRouteProfile> routes)
			throws ResourceUnavailableException {
		// TODO Auto-generated method stub
		return true;
	}
	
    @Override
    public Provider getProvider() {
        return Provider.VPCJuniperSRX;
    }
    
    private static Map<Service, Map<Capability, String>> setCapabilities() {
        Map<Service, Map<Capability, String>> capabilities = new HashMap<Service, Map<Capability, String>>();
        capabilities.putAll(JuniperSRXExternalFirewallElement.capabilities);
        
        //add network ACL capability
        Map<Capability, String> networkACLCapabilities = new HashMap<Capability, String>();
        networkACLCapabilities.put(Capability.SupportedProtocols, "tcp,udp,icmp");
        capabilities.put(Service.NetworkACL, networkACLCapabilities);
        
        return capabilities;
    }
    
    @Override
    public Map<Service, Map<Capability, String>> getCapabilities() {
        return capabilities;
    }

}
